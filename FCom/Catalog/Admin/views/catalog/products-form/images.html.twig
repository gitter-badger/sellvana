{% set m = THIS.get('model') %}
{% set prodImagesConfig = APP.instance('FCom_Catalog_Admin_Controller_Products').productImagesGridConfig(m) %}
<script>
var all_prod_images_grid, imagesGrid;
require(['jquery','underscore','backbone'], function($, _) {
    var originIds, removedIds = [];
    var rowsAllImages;
    var mainThumb = $('#main-thumb-image');
    function _getAttachmentsDbFields(row) {
        return {
            id: row.id,
            file_id: row.file_id,
            label: row.label,
            position: row.position,
            _new: row._new
        };
    }

    /*
    *relect attachment grid data into form fields to send them server
    */
    window.setImagesGridVals = function() {

        removedIds = _.difference(originIds, imagesGrid.getRows().pluck('id'));

        var rows = [];
        imagesGrid.getRows().forEach(function(row) {
            rows.push(_getAttachmentsDbFields(row.toJSON()));
        });

        $('#prod-image-rows').val(JSON.stringify(rows));
        $('#prod-image-remove').val(removedIds.join(','));
    }

    /*
    *MediaGrid registery function
    */
    window.all_prod_images_register = function(grid) {
        all_prod_images_grid = grid;
        grid.build();


        rowsAllImages = grid.getRows();
        grid.getSelectedRows().on('add remove reset', function() {
            if (grid.getSelectedRows().length>0) {
                $('.btn_all_prod_images_add').removeClass('disabled');
            } else {
                $('.btn_all_prod_images_add').addClass('disabled');
            }
        });

        $('.btn_all_prod_images_add').click(function() {
            var gridView = imagesGrid.getGridView();
            grid.getSelectedRows().forEach(function (row) {
                if (!imagesGrid.getRows().findWhere({file_id: row.get('id')})) {
                    var addedRow = row;
                    addedRow.set('_new', true);
                    addedRow.set('file_id', row.id);
                    addedRow.set('id', guid());
                    addedRow.set('selected', false);
                    gridView.collection.add(addedRow.toJSON(), {silent: true});
                }
            });

            gridView.render();
            grid.getGridView().clearSelectedRows();
            $('#all_prod_images_modal').modal('hide');

        });
    }

    window.imagesGridRegister = function(grid) {
        var confirmDelete = $('#confirm-delete-product-images');
        var selfRow;
        imagesGrid = grid;
        var rowView = imagesGrid.getGridSkeleton().Views.RowView;
        rowView.prototype.afterRender = function() {
            var input = this.$el.find('.main-thumb');
            if (mainThumb.val() == '' && this.model.get('main_thumb') == 1) {
                input.prop('checked', true);
            }
            if (mainThumb.val() == this.model.get('id')) {
                input.prop('checked', true);
            }
        }

        rowView.prototype._deleteRow = function (ev) {
            selfRow = this;
            var text = (this.model.get('associated_products') > 0) ?
                        "This image is associated with "+ this.model.get('associated_products') +" of products. Are you sure you want to delete?" : "Are you sure you want to delete?";
            confirmDelete.find('.modal-body').html(text);
            confirmDelete.modal('show');
        }

        $('.prod-images-modal-delete').click(function () {
            imagesGrid.getRows().remove(selfRow.model);
            imagesGrid.getSelectedRows().remove(selfRow.model, {silent: true});
            selfRow._destorySelf();
            confirmDelete.modal("hide");
        });

        imagesGrid.build();

        originIds = imagesGrid.getRows().pluck('id');
        console.log(originIds);

        $(imagesGrid.getGridSkeleton().AddButton).click(function() {
            refreshGridAdd();
            $('#all_prod_images_modal').modal('show');
        });

    }

    function refreshGridAdd() {
        var data = getExcludeId();
        all_prod_images_grid.getGridSkeleton().current_filters['exclude_id'] = data;
        rowsAllImages.fetch({reset: true});
    }

    function getExcludeId() {
        var arr = imagesGrid.getGridView().collection.pluck('file_id');
        return  arr.join(',');
    }


});
</script>
{{ THIS.view('core/backbonegrid').set('grid', prodImagesConfig) | raw }}
{{ THIS.view('core/medialib').set('config', {'id': 'all_prod_images', 'folder': 'media/product/images', mode: 'thumbnail', title: 'Images', multiSelAllowed: true}) | raw }}

<input type='hidden' name="grid[images][del]" id='prod-image-remove' />
<input type='hidden' name="grid[images][rows]" id='prod-image-rows' />
<input type='hidden' id='main-thumb-image' value="" />
<div class='modal fade' id='confirm-delete-product-images' tabindex='-1'>
    <div class='modal-dialog'>
        <div class='modal-content'>
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">{{ "Delete"|_ }}</h4>
                </div>
            <div class='modal-body'>
            </div>
            <div class='modal-footer'>
                <button class='btn btn-primary btn-add prod-images-modal-delete' data-dismiss='modal' type='button'>{{ "Yes"|_ }}</button>
                <button class='btn btn-default btn-close' data-dismiss='modal' type='button'>{{ "Cancel"|_ }}</button>
            </div>
        </div>
    </div>
</div>
