{% set tabs = THIS.sortedTabs() %}
{% set m = THIS.get('model') %}

<script>
    require(['fcom.admin', 'jquery.validate'], function() {
        FCom.Admin.Tabs('.f-admin-main-container', {
            url_get: "{{ THIS.get('form_url') }}",
            cur_tab: "{{ THIS.get('cur_tab') }}"
        });
        var mainForm = $('form#categories-tree-form');
        var elem = mainForm.find('input, textarea, select');
        function processFlag (validator) {
            var info = {};
            for(key in validator.invalid) {
                var element = jQuery('input[name="'+key+'"], textarea[name="'+key+'"], select[name="'+key+'"]');
                if (element.length>0) {
                    var tab = element.parents('div.tab-pane');
                    var key = '#'+tab.attr('id');
                    if (typeof(info[key]) === 'undefined')
                        info[key] = 1;
                    else
                        info[key]++;
                }
            }

            mainForm.find('ul.nav-tabs').find('li a').each(function(index) {
                var val = info[$(this).attr('href')];

                if (typeof(val) !== 'undefined')
                {
                    if ($(this).find('i.error').length === 0) {
                        $(this).append('<i class="icon-warning-sign error"></i>');
                    }
                } else {
                    $(this).find('i.error').remove();
                }
            });

            for (key in info) {
                $('a[href="'+key+'"]').trigger('click');
                break;
            }
        }
        mainForm.validate({
            ignore: [],
            invalidHandler: function(event, validator) {
                processFlag(validator);
            },
            submitHandler: function (form) {
                processFlag({invalid: null});
                if (CKEDITOR !== 'undefined') {
                    for (key in CKEDITOR.instances) {
                        $('#' + key).val(CKEDITOR.instances[key].getData());
                    }
                }
                $.ajax({
                    type: "POST",
                    url: mainForm.attr('action'),
                    data: mainForm.serialize(),
                    success: function (data)
                    {
                        if (data.status == 'error') {
                            $.bootstrapGrowl("Error:<br>" + data.message, { type: 'danger', align: 'center', width: 'auto', delay: 5000});
                        } else {
                            $.bootstrapGrowl("Saved", { type: 'success', align: 'center', width: 'auto' });
                            var nodeSelected = $.jstree._focused().get_selected();
                            $.jstree._focused().set_text(nodeSelected, $('#main-node_name').val());
                            $('.page-header .f-page-title').html(data.path.replace(/\|/g, ' '));
                        }
                        console.log(self);
                    },
                    error: function (xhr, textStatus, errorThrown)
                    {
                        alert("[ERROR]<br>" + textStatus);
                    }
                });
            }
        });
        elem.on('change', function () {
            mainForm.find('ul.nav-tabs').find('li.active').each(function () {
                if ($(this).children('a').find('i.icon-pencil').length === 0) {
                    if ($(this).children('a').children('i.error').length !== 0) {
                        $('<i class="icon-pencil"></i>').insertBefore($(this).children('a').children('i.error'));
                    } else {
                        $(this).children('a').append('<i class="icon-pencil"></i>');
                    }
                }
            })
        });

        var categoriesTree = FCom.Admin.load('trees', '#categories');
        if (categoriesTree) {
            $('.tree-action').find('a').on('click', function(){
                var action = $(this).attr('rel');
                var selected = categoriesTree.jstree('get_selected');
                switch (action) {
                    case 'create':
                        categoriesTree.jstree('create', selected, 'inside', { data: 'New Node'}, false, false);
                        break;
                    case 'rename':
                        categoriesTree.jstree('rename', selected);
                        break;
                    case 'remove':
                        categoriesTree.jstree('remove', selected);
                        break;
                    case 'clone':
                        var parentSelected = $.jstree._focused()._get_parent();
                        categoriesTree.jstree('copy', selected);
                        categoriesTree.jstree('paste', parentSelected);
                        break;
                    case 'reorder':
                        categoriesTree.trigger('reorder.jstree', selected);
                        break;
                    case 'refresh':
                        categoriesTree.jstree('refresh', selected);
                }
            });
        }
    });

</script>

<div class="f-admin-main-content">
  <div class="page-header">
    <div class="f-page-title">{{ m.get('full_name')|replace('|', ' > ') }}</div>
    <div class="btn-group">
      <!--<button class="btn btn-default btn-sm" id="category_clone" type="submit" name="action" value="clone">{{ 'Clone'|_ }}</button>-->
      <button class="btn btn-primary btn-sm" id="category_save" type="submit" name="action" value="save">{{ 'Save'|_ }}</button>
    </div>
  </div>
  <div class="tree-action">
    <div class="btn-group">
      <a href="#" rel="create" class="btn btn-primary">{{ 'Create' }}</a>
      <a href="#" rel="rename" class="btn btn-primary">{{ 'Rename' }}</a>
      <a href="#" rel="remove" class="btn btn-primary">{{ 'Delete' }}</a>
      <a href="#" rel="clone" class="btn btn-primary">{{ 'Clone' }}</a>
      <a href="#" rel="select" class="btn btn-primary">{{ 'Select' }}</a>
      <a href="#" rel="reorder" class="btn btn-primary">{{ 'Reorder A-Z' }}</a>
      <a href="#" rel="refresh" class="btn btn-primary">{{ 'Refresh' }}</a>
    </div>
  </div>
  <div class="nav">
    <ul class="nav nav-tabs">
      {% for k, tab in tabs %}
          <li>
              <a class="js-form-tab-toggle" href="#tab-{{ k }}" data-toggle="tab"><span class="icon"></span>{{ tab.label }} </a>
          </li>
      {% endfor %}
    </ul>
  </div>
  <div class="tab-content f-admin-main-content">
    {% for k, tab in tabs %}
      {% if tab.view is not empty %}
          <div class="tab-pane" id="tab-{{ k }}" {% if tab.async is empty %}data-loaded="true"{% endif %}>
              {% if tab.async is empty %}{{ THIS.view(tab.view)|raw }}{% endif %}
          </div>
      {% endif %}
    {% endfor %}
  </div>
</div>
