<script>
    /*require(['backbone', 'underscore', 'jquery'], function(Backbone, _, $) {
        var mainGrid;
        var inputName = 'input[data-col="name"]';
        var inputOption = 'input[data-col="options"]';
        var selectFieldType = 'select[data-col="input_type"]';
        window.frontendFieldGridRegister = function(grid) {
            mainGrid = grid;
            grid.getGridSkeleton().Views.RowView.prototype.afterRender = function() {
                var self = this;
                this.$el.find(inputName).addClass('unique');
                this.$el.find(inputOption).addClass('requiredOptions');
                if (this.model.get('input_type') != 'select') {
                    this.$el.find(inputOption).prop('disabled', true);
                }
                this.$el.find(selectFieldType).change(function() {
                    if ($(this).val() == 'select') {
                        self.$el.find(inputOption).prop('disabled', false);
                    } else {
                        self.$el.find(inputOption).prop('disabled', true);
                    }
                })
            }
            grid.build();
        }
        $('#catalog-products-form').submit(function (ev) {
            var rows = mainGrid.getRows().toJSON();

            var res = [];
            for (var i in rows) {
                if (rows[i].position.length == 0) {
                    rows[i].position = 0;
                }
                res.push(_.pick(rows[i], 'id', 'name', 'label', 'input_type', 'required', 'options', 'position'));
            }

            $("#prod_frontend_data").val(JSON.stringify(res));
        });
        function checkUnique(value, elem, params) {
            var error = true;
            if (typeof (elem) !== 'undefined') {
                var parent = $(elem).parents('tr');
                var val = parent.find(inputName).val();
                mainGrid.getRows().each(function (data) {
                    if (parent.attr('id') != data.get('id') && val == data.get('name')) {
                        error = false;
                    }
                });
            }

            return error;
        }

        $.validator.addMethod('checkUnique', checkUnique , 'Field Name are already taken place.');

        $.validator.addClassRules("requiredOptions", {
            required: function (value, elem, params) {
                var error = true;
                if (typeof (elem) !== 'undefined') {
                    var parent = $(elem).parents('tr');
                    if (parent.find(selectFieldType).val() == 'select' &&  value.trim().length == 0) {
                        error = false;
                    }
                }
                return error;
            }
        });

        $.validator.addClassRules("unique", {
            required: true,
            checkUnique: true
        });

    });*/
</script>
<script>
    require(['react', 'underscore', 'jquery', 'griddle.fcomModalForm', 'fcom.components'], function(React, _, $, FComModalForm, Components) {
        var inputName = 'input[data-col="name"]';
        var inputOption = 'input[data-col="options"]';
        var selectFieldType = 'select[data-col="input_type"]';

        var shopperGrid, shopperNode, shopperModalNode;
        /**
         * Main grid register callback
         * @param  {Object} grid
         * @return mixed
         */
        window.fieldsGridRegister = function(grid) {
            shopperGrid = grid;
            shopperNode = $(shopperGrid.getDOMNode());
            updateValidation();
            shopperNode.on('removedRows.griddle', function (e, removedRows, grid) {
                console.log('removedRows callback');
            })
            .on('addedRows.griddle', function (e, removedRows, grid) {
                updateValidation();
            });
        }

        /**
         * Add blank row to grid
         */
        window.addBlankRows = function(grid) {
            shopperGrid.addRows([{id : guid()}]);
        }

        /**
         * Modal for editing shopper field item
         * @param  {Object} row
         * @return React modal form
         */
        window.showModalToEditShopperField = function(row) {
            // var modalContainerEle = document.getElementById(shopperGrid.getConfig('id') +'-modal');
            var modalContainerEle = document.getElementById('fcom_append_form');
            React.unmountComponentAtNode(modalContainerEle);
            React.render(
                React.createElement(Components.Modal, {
                        id: "editShopperFieldsModal",
                        show: true,
                        title: 'Edit Form',
                        confirm: 'Save changes',
                        cancel: 'Close',
                        onLoad: function(modal) {
                            shopperModalNode = $(modal.getDOMNode());
                            shopperModalNode.find('.modal-dialog').css('width', '900px');
                        },
                        onConfirm: window.saveShopperModal
                    },
                    React.createElement(FComModalForm, {columnMetadata: shopperGrid.props.columnMetadata, id: shopperGrid.getConfig('id'), row: row, id: shopperGrid.getConfig('id')})
                    ), modalContainerEle);
        }

        /**
         * Callback function for update field
         * @return mixed
         */
        window.saveShopperModal = function(modal) {
            var fields  = shopperModalNode.find('select, input, textarea, select'),
                form    = shopperModalNode.find('form'),
                id      = form.find('#id').val(),
                hash    = { oper: id ? 'edit' : 'add', id: id },
                url     = shopperGrid.getConfig('data_url');

            fields.each(function() {
                var key = $(this).attr('id');
                var val = $(this).val();
                var name = $(this).attr('name');
                hash[key] = shopperGrid.html2text(val);
                if (name === 'input_type') {
                    if (val !== 'select') {
                        $('#' + shopperGrid.getConfig('id') + '-options-' + id).prop('disabled', true);
                    } else {
                        $('#' + shopperGrid.getConfig('id') + '-options-' + id).prop('disabled', false);
                    }
                }
                $('#' + shopperGrid.getConfig('id') + '-' + name + '-' + id).val(shopperGrid.html2text(val));
            });

            if (form.valid()) {
                shopperGrid.updateRows([hash]);
                modal.close();
            }
        }

        /*
         *function to set attachment grid data into form fields to send them server
         *This function is callend when 'save' button of product form is clicked.
         */
        window.submitCallback.push(function () {
            shopperNode.find('form').validate();
            var rows = shopperGrid.getRows();

            var res = [];
            for (var i in rows) {
                if (rows[i].position == 0) {
                    rows[i].position = 0;
                }
                res.push(_.pick(rows[i], 'id', 'name', 'label', 'input_type', 'required', 'options', 'position'));
            }

            $("#prod_frontend_data").val(JSON.stringify(res));
        });

        /**
         * Update validation class for all rows
         * @return mixed
         */
        function updateValidation() {
            shopperNode.find(inputName).addClass('unique');
            shopperNode.find(inputOption).addClass('requiredOptions');
            var rows = shopperGrid.getRows();
            _.each(rows, function(row) {
                if (row.input_type != 'select') {
                    shopperNode.find('tr#' + row.id).find(inputOption).prop('disabled', true);
                }
            });
            /**
             * Disable options upon field type is not dropdown
             */
            shopperNode.find(selectFieldType).on('change', function(e) {
                var pId = $(this).parents('tr').attr('id');
                if ($(this).val() == 'select') {
                    $(this).parents('tr#'+pId).find(inputOption).prop('disabled', false);
                } else {
                    $(this).parents('tr#'+pId).find(inputOption).prop('disabled', true);
                }
            });

            /**
             * Check grid field name is unique
             * @return boolean
             */
            function checkUnique(value, elem, params) {
                var error = true;
                if (typeof (elem) !== 'undefined') {
                    var parent = $(elem).parents('tr');
                    var val = parent.find(inputName).val();
                    _.each(shopperGrid.getRows(), function(data) {
                        if (parent.attr('id') != data.id && val == data.name) {
                            error = false;
                        }
                    });
                }
                return error;
            }

            $.validator.addMethod('checkUnique', checkUnique , 'Field Name are already taken place.');

            $.validator.addClassRules("requiredOptions", {
                required: function (value, elem, params) {
                    var error = true;
                    if (typeof (elem) !== 'undefined') {
                        var parent = $(elem).parents('tr');
                        if (parent.find(selectFieldType).val() == 'select' &&  value.trim().length == 0) {
                            error = false;
                        }
                    }
                    return error;
                }
            });

            $.validator.addClassRules("unique", {
                required: true,
                checkUnique: true
            });
        }
    });
</script>
<input type='hidden' id='prod_frontend_data' name='prod_frontend_data' />
<div class="row">
    <div class="col-sm-10">
        {{ THIS.view('core/griddle').set('grid', APP.instance('Sellvana_ShopperFields_Admin').frontendFieldGrid(model))| raw }}
    </div>
</div>
